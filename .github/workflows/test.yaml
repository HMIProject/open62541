# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: test

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short

jobs:
  run:
    strategy:
      # Don't give up on the whole matrix if one variant fails.
      fail-fast: false
      matrix:
        # Keep targets archs in sync with `latest-dependencies.yaml`. Use
        # specific versions of runner OS here and latest ones in
        # `latest-dependencies.yaml`.
        include:
          - target: aarch64-apple-darwin
            runner_os: macos-14
          - target: aarch64-apple-darwin
            runner_os: macos-15

          - target: armv7-unknown-linux-gnueabihf
            runner_os: ubuntu-22.04
          - target: armv7-unknown-linux-gnueabihf
            runner_os: ubuntu-24.04

          - target: x86_64-apple-darwin
            runner_os: macos-13
          - target: x86_64-apple-darwin
            runner_os: macos-14
          - target: x86_64-apple-darwin
            runner_os: macos-15

          - target: x86_64-pc-windows-msvc
            runner_os: windows-2022
          - target: x86_64-pc-windows-msvc
            runner_os: windows-2025

          - target: x86_64-unknown-linux-gnu
            runner_os: ubuntu-22.04
          - target: x86_64-unknown-linux-gnu
            runner_os: ubuntu-24.04

          - target: x86_64-unknown-linux-musl
            runner_os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            runner_os: ubuntu-24.04

    runs-on: ${{ matrix.runner_os }}

    steps:
      - name: Adjust build settings for Windows
        if: contains(matrix.target, '-windows-')
        # Required for Windows builds: for version numbers with pre-release part
        # as suffix, the resulting paths would get too long to build otherwise.
        #
        # Windows 2025 and later do not provision a drive D and we have to use the main drive C:
        # for Cargo build artifacts: <https://github.com/actions/runner-images/issues/12416>
        run: >-
          echo "CARGO_TARGET_DIR=C:\t" >> $env:GITHUB_ENV

      - name: Install Rust toolchain
        # Use specific Rust version that is the minimum supported `rust-version`
        # (MSRV) from `Cargo.toml`.
        uses: dtolnay/rust-toolchain@1.83
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          # Setting the target sets the `CARGO_BUILD_TARGET` environment variable,
          # so there is no need for an explicit `--target` flag in each build step.
          # This is required for both native and cross-platform builds to avoid
          # using the default target of the runner.
          target: ${{ matrix.target }}

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install Cargo helpers
        run: >-
          cargo binstall cargo-hack

      # Check out the repository before the remaining steps that depend on it.
      # All preceding steps are independent of the repository contents.
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          submodules: recursive

      - name: Cache Rust toolchain and build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          # The cache should not be shared between different workflows, jobs, and targets.
          shared-key: ${{ github.workflow }}-${{ github.job }}-${{ matrix.target }}-${{ matrix.runner_os }}

      - name: Build with feature combinations
        run: >-
          cargo hack --each-feature
          build --locked

      - name: Run tests (bins/lib/tests/examples) with feature combinations
        run: >-
          cargo hack --each-feature
          test --locked
          --bins --lib --tests --examples

      # Compile and run doctests, which have been excluded in the previous
      # step(s).
      #
      # Doctests may use any features and there is no easy way to activate
      # certain features only for some doctests, so we run them without
      # `cargo-hack`.
      - name: Run doctests with all features enabled
        run: >-
          cargo test
          --locked --all-features
          --doc

      - name: Build package with all features enabled
        run: >-
          cargo package
          --locked --all-features
